## Tool to convert QuickJS C bytecode output to Nim const array
import std/[os, strutils]

when isMainModule:
  if paramCount() < 1:
    echo "Usage: c_bytecode_to_nim <input.c> [output.nim]"
    quit(1)
  
  let inputFile = paramStr(1)
  let outputFile = if paramCount() >= 2: paramStr(2) else: inputFile.changeFileExt("nim")
  
  if not fileExists(inputFile):
    echo "Error: Input file not found: ", inputFile
    quit(1)
  
  let content = readFile(inputFile)
  
  # Extract the array name from size declaration
  let sizeLineStart = content.find("const uint32_t ")
  if sizeLineStart == -1:
    echo "Error: Could not find size declaration"
    quit(1)
  
  let sizeLineEnd = content.find(";", sizeLineStart)
  let sizeLine = content[sizeLineStart..sizeLineEnd]
  
  # Parse array name - looking for pattern: const uint32_t NAME_size = NUMBER;
  let parts = sizeLine.split(" ")
  var arrayName = ""
  var arraySize = ""
  
  for i, part in parts:
    if part.endsWith("_size"):
      arrayName = part.replace("_size", "")
    elif part == "=":
      if i + 1 < parts.len:
        arraySize = parts[i + 1].replace(";", "")
  
  if arrayName == "" or arraySize == "":
    echo "Error: Could not parse array name or size from: ", sizeLine
    quit(1)
  
  echo "Found array: ", arrayName, " with size: ", arraySize
  
  # Find the array data
  let arrayStart = content.find("const uint8_t " & arrayName & "[")
  if arrayStart == -1:
    echo "Error: Could not find array declaration"
    quit(1)
  
  let dataStart = content.find(" = {", arrayStart)
  let dataEnd = content.find("};", dataStart)
  
  if dataStart == -1 or dataEnd == -1:
    echo "Error: Could not find array data"
    quit(1)
  
  # Extract just the hex values between { and }
  let dataSection = content[dataStart + 4 ..< dataEnd]
  
  # Parse hex values
  var bytes: seq[byte]
  
  # Remove all whitespace and split by comma
  let cleanData = dataSection.multiReplace([("\n", ""), (" ", ""), ("\t", "")])
  let hexValues = cleanData.split(",")
  
  for hex in hexValues:
    if hex.len > 0 and hex.startsWith("0x"):
      bytes.add(parseHexInt(hex).byte)
  
  echo "Parsed ", bytes.len, " bytes"
  
  # Generate Nim code
  var nimCode = "## Auto-generated bytecode from " & inputFile & "\n"
  nimCode.add("## Generated using c_bytecode_to_nim tool\n\n")
  nimCode.add("const " & arrayName & "Bytecode* = [\n")
  
  # Write bytes in rows of 16
  for i in countup(0, bytes.high, 16):
    nimCode.add("  ")
    var lineBytes = 0
    for j in 0 ..< 16:
      if i + j <= bytes.high:
        if lineBytes > 0:
          nimCode.add(", ")
        nimCode.add("0x" & bytes[i + j].toHex(2).toLowerAscii & "'u8")
        lineBytes += 1
    if i + 16 <= bytes.high:
      nimCode.add(",")
    nimCode.add("\n")
  
  nimCode.add("]\n")
  
  writeFile(outputFile, nimCode)
  echo "Successfully converted to: ", outputFile
  echo "Array size: ", bytes.len, " bytes"